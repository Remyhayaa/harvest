// 📁 firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // PRODUCTS COLLECTION
    match /products/{productId} {
      allow read: if true;  // Publicly readable
      allow create, update: if isAdmin();
      allow delete: if false; // Use isActive flag instead
      
      function isAdmin() {
        return request.auth != null && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
      }
    }
    
    // ORDERS COLLECTION
    match /orders/{orderId} {
      allow read: if isOwner() || isAdmin();
      allow create: if isValidOrder();
      
      function isOwner() {
        return request.auth != null && 
               (resource.data.customer.userId == request.auth.uid || 
                resource.data.customer.phone == request.auth.token.phone);
      }
      
      function isValidOrder() {
        return request.resource.data.items.size() > 0 &&
               request.resource.data.customer.phone.matches('\\+256[0-9]{9}') &&
               request.resource.data.total == calculateTotal();
      }
      
      function calculateTotal() {
        let sum = 0;
        return request.resource.data.items.reduce((acc, item) => {
          return acc + (item.quantity * item.unitPrice);
        }, 0) + request.resource.data.deliveryFee;
      }
    }
    
    // USERS COLLECTION
    match /users/{userId} {
      allow read: if isOwner() || isAdmin();
      allow write: if isOwner() && 
                    request.resource.data.role == resource.data.role; // Prevent role escalation
      
      function isOwner() {
        return request.auth != null && userId == request.auth.uid;
      }
    }
  }
}